
#Область ПрограммныйИнтерфейс

// Читает из строки и возвращает массив элементов графической схемы
//
// Параметры:
//   Схема - ГрафическаяСхема - Источник данных для получения элементов (блоков и соединительных линий)
//
// Возвращаемое значение:
//   Массив из Структура:
//     * 
//
Функция ПолучитьЭлементыСхемы(Схема) Экспорт
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Схема.Записать(ПотокВПамяти);
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();

	ЧтениеТекста = Новый ЧтениеТекста(ДвоичныеДанные.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
	СтрокаСхемы = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат РазобратьСтрокуНаЭлементы(СтрокаСхемы);
	
КонецФункции

// По переданному массиву элементов формирует строку с данными и устанавливает эти данные в элемент графической схемы
//
// Параметры:
//   Схема         - ГрафическаяСхема    - 
//   ЭлементыСхемы - Массив из Структура - см.ПолучитьЭлементыСхемы
//
Процедура УстановитьСхемуИзЭлементов(Схема, ЭлементыСхемы) Экспорт

	СтрокаДанных = ПолучитьФайлСхемы(ЭлементыСхемы);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();

	Схема.Прочитать(ДвоичныеДанные.ОткрытьПотокДляЧтения());

КонецПроцедуры

//
//
Функция ТипыБлоков() Экспорт
	
	Блоки = Новый Структура;
	Блоки.Вставить("Линия", "Линия");
	Блоки.Вставить("Старт", "Старт");
	Блоки.Вставить("Завершение", "Завершение");
	Блоки.Вставить("Условие", "Условие");
	Блоки.Вставить("Действие", "Действие");
	Блоки.Вставить("ВыборВарианта", "ВыборВарианта");
	Блоки.Вставить("Разделение", "Разделение");
	Блоки.Вставить("Слияние", "Слияние");
	Блоки.Вставить("Обработка", "Обработка");
	Блоки.Вставить("ВложенныйПроцесс", "ВложенныйПроцесс");
	
	Возврат Новый ФиксированнаяСтруктура(Блоки);
	
КонецФункции

//
//
Функция ПолучитьСтруктуруЛинии() Экспорт
	
	СтруктураЛинии = Новый Структура;
	СтруктураЛинии.Вставить("Тип");
	СтруктураЛинии.Вставить("Идентификатор");
	СтруктураЛинии.Вставить("НомерПП");
	СтруктураЛинии.Вставить("ВладелецЛинии");
	СтруктураЛинии.Вставить("ТочкаВладельцаЛинии");
	СтруктураЛинии.Вставить("ЦельЛинии");
	СтруктураЛинии.Вставить("ТочкаЦелиЛинии");
	СтруктураЛинии.Вставить("КоординатыТочек");
	СтруктураЛинии.Вставить("Заголовок");
	СтруктураЛинии.Вставить("ТочкаВарианта");
	
	Возврат СтруктураЛинии;
	
КонецФункции

//
//
Функция ПолучитьСтруктуруБлока() Экспорт
	
	СтруктураБлока = Новый Структура;
	СтруктураБлока.Вставить("Тип");
	СтруктураБлока.Вставить("Идентификатор");
	СтруктураБлока.Вставить("НомерПП");
	СтруктураБлока.Вставить("КоординатаX");
	СтруктураБлока.Вставить("КоординатаY");
	СтруктураБлока.Вставить("РазмерX");
	СтруктураБлока.Вставить("РазмерY");
	СтруктураБлока.Вставить("Заголовок");
	СтруктураБлока.Вставить("МассивВариантов");
	
	Возврат СтруктураБлока;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеФайлаСхемы

Функция РазобратьСтрокуНаЭлементы(СтрокаСхемы)

	ВремСтрокаСхемы = СтрЗаменить(СтрокаСхемы, Символы.ПС, "");
	МассивЗначенийСвойствЭлемнтовСхемы = СтрРазделить(ВремСтрокаСхемы, ",", Истина);
	
	СтрокаКоличестваЭлементовСхемы = "";
	МассивЭлементовЗаголовка = Новый Массив;
	Для Сч = 0 По 28 Цикл
		МассивЭлементовЗаголовка.Добавить(МассивЗначенийСвойствЭлемнтовСхемы[Сч]);
		Если Сч = 28 Тогда
			СтрокаКоличестваЭлементовСхемы = МассивЗначенийСвойствЭлемнтовСхемы[Сч];
		КонецЕсли;
	КонецЦикла;
	СтрокаЗаголовкаСхемы = СтрСоединить(МассивЭлементовЗаголовка, ",") + ",";
	
	СтрокаЭлементов = Сред(ВремСтрокаСхемы,
		СтрДлина(СтрокаЗаголовкаСхемы) + 1,
		СтрДлина(ВремСтрокаСхемы) - СтрДлина(СтрокаЗаголовкаСхемы) - (СтрДлина(СтрокаКоличестваЭлементовСхемы) + 2));
		
	МассивЭлементов = Новый Массив;
		
	СтрокаОчередногоЭлемента = "";
	БылиСкобки = Ложь;
	КоличествоОткрытыхСкобок = 0;
	Для Сч = 1 По СтрДлина(СтрокаЭлементов) Цикл
		
		ОчереднойСимвол = Сред(СтрокаЭлементов, Сч, 1);
		Если ОчереднойСимвол = "{" Тогда
			КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок + 1;
			БылиСкобки = Истина;
		ИначеЕсли ОчереднойСимвол = "}" Тогда
			КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
		КонецЕсли;
		СтрокаОчередногоЭлемента = СтрокаОчередногоЭлемента + ОчереднойСимвол;
		
		Если КоличествоОткрытыхСкобок = 0 И БылиСкобки Тогда
			МассивЭлементов.Добавить(СтрокаОчередногоЭлемента);
			СтрокаОчередногоЭлемента = "";
			БылиСкобки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыСхемы = Новый Массив;
	Для каждого ЭлементСхемы Из МассивЭлементов Цикл
		ДанныеЭлемента = ПолучитьДанныеЭлемента(ЭлементСхемы);
		ЭлементыСхемы.Добавить(ДанныеЭлемента);
	КонецЦикла;
	
	Возврат ЭлементыСхемы;

КонецФункции

Функция ПолучитьДанныеЭлемента(Знач ЭлементСхемы)
	
	Если СтрНачинаетсяС(ЭлементСхемы, ",") Тогда
		ЭлементСхемы = Сред(ЭлементСхемы, 2);
	КонецЕсли;
	
	МассивЗначенийСвойствЭлемнтовСхемы = СтрРазделить(ЭлементСхемы, ",", Истина);
	Если Число(МассивЗначенийСвойствЭлемнтовСхемы[0]) = КодБлока(ТипыБлоков().Линия) Тогда
		СтруктураЭлемента = СформироватьСтруктуруЛинии(ЭлементСхемы);
	Иначе
		СтруктураЭлемента = СформироватьСтруктуруБлока(ЭлементСхемы);
	КонецЕсли;
	
	Возврат СтруктураЭлемента;
	
КонецФункции

Функция СформироватьСтруктуруЛинии(СтрокаЭлемента)
	
	// TODO: Отрафакторить эту функцию и СформироватьСтруктуруБлока
	
	// Разбирать данные файла стоит для того чтобы получить координаты точек. В свойствах объектов схемы их почему-то нет.
	СтрокаЭлементаРазбитаяНаБлоки = РазбитьСтрокуНаБлоки(СтрокаЭлемента);
	Если Не СтрЧислоСтрок(СтрокаЭлементаРазбитаяНаБлоки) = 2 Тогда
		ВызватьИсключение "ПолучитьСтруктуруЛинии: неверный формат строки элемента";
	КонецЕсли;
	
	СтрокаНастроекЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаЭлементаРазбитаяНаБлоки, 2), 2, СтрДлина(СтрПолучитьСтроку(СтрокаЭлементаРазбитаяНаБлоки, 2)) - 2));
	Если Не СтрЧислоСтрок(СтрокаНастроекЭлемента) = 7 Тогда
		ВызватьИсключение "ПолучитьСтруктуруЛинии: неверный формат строки настроек элемента";
	КонецЕсли;
	
	СтрокаЗаголовкаЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаНастроекЭлемента, 1), 2, СтрДлина(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 1)) - 2));
	
	СтрокаТекстаЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаЗаголовкаЭлемента, 3), 2, СтрДлина(СтрПолучитьСтроку(СтрокаЗаголовкаЭлемента, 3)) - 2));
	Если СтрЧислоСтрок(СтрокаТекстаЭлемента) > 2 Тогда
		
		СтрокаТекстаБлока = РазбитьСтрокуНаБлоки(Сред(
			СтрПолучитьСтроку(СтрокаТекстаЭлемента, 3), 2, СтрДлина(СтрПолучитьСтроку(СтрокаТекстаЭлемента, 3)) - 2));
			
		Заголовок = СтрЗаменить(СтрПолучитьСтроку(СтрокаТекстаБлока, 2), """", "");
		
	Иначе
		Заголовок = "";
	КонецЕсли;

	СтрокаОтображенияЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаНастроекЭлемента, 7), 3, СтрДлина(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 7)) - 4));
	
	КоординатыТочек = Новый СписокЗначений;
	
	Сч = 4;
	Пока Истина Цикл
		ОчереднаяСтрока = СтрПолучитьСтроку(СтрокаОтображенияЭлемента, Сч);
		
		Если СтрНайти(ОчереднаяСтрока, "{") > 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоординатыТочек.Добавить(Число(ОчереднаяСтрока));
		Сч = Сч + 1;
	КонецЦикла;
	
	СтруктураЛинии = ПолучитьСтруктуруЛинии();
	СтруктураЛинии.Тип                 = ТипыБлоков().Линия;
	СтруктураЛинии.Идентификатор       = СтрЗаменить(СтрПолучитьСтроку(СтрокаЗаголовкаЭлемента, 4), """", "");
	СтруктураЛинии.НомерПП             = Число(СтрПолучитьСтроку(СтрокаЗаголовкаЭлемента, 2));
	СтруктураЛинии.ВладелецЛинии       = Число(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 3));
	СтруктураЛинии.ТочкаВладельцаЛинии = Число(СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 6 + КоординатыТочек.Количество()));
	СтруктураЛинии.ЦельЛинии           = Число(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 5));
	СтруктураЛинии.ТочкаЦелиЛинии      = Число(СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 7 + КоординатыТочек.Количество()));
	СтруктураЛинии.КоординатыТочек     = КоординатыТочек;
	СтруктураЛинии.Заголовок           = Заголовок;
	СтруктураЛинии.ТочкаВарианта       = Число(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 4));
	
	Возврат СтруктураЛинии;
	
КонецФункции

Функция СформироватьСтруктуруБлока(СтрокаЭлемента)

	СтрокаЭлементаРазбитаяНаБлоки = РазбитьСтрокуНаБлоки(СтрокаЭлемента);
	Если Не СтрЧислоСтрок(СтрокаЭлементаРазбитаяНаБлоки) = 2 Тогда
		ВызватьИсключение "ПолучитьСтруктуруБлока: неверный формат строки элемента";
	КонецЕсли;
	
	СтрокаНастроекЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаЭлементаРазбитаяНаБлоки, 2), 2, СтрДлина(СтрПолучитьСтроку(СтрокаЭлементаРазбитаяНаБлоки, 2)) - 2));
	Если Не СтрЧислоСтрок(СтрокаНастроекЭлемента) >= 4 Тогда
		ВызватьИсключение "ПолучитьСтруктуруБлока: неверный формат строки настроек элемента";
	КонецЕсли;
	
	СтрокаЗаголовкаЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаНастроекЭлемента, 1), 2, СтрДлина(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 1)) - 2));
		
	СтрокаИдентификатораЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаЗаголовкаЭлемента, 1), 2, СтрДлина(СтрПолучитьСтроку(СтрокаЗаголовкаЭлемента, 1)) - 2));
		
	СтрокаТекстаЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаИдентификатораЭлемента, 3), 2, СтрДлина(СтрПолучитьСтроку(СтрокаИдентификатораЭлемента, 3)) - 2));
	Если СтрЧислоСтрок(СтрокаТекстаЭлемента) > 2 Тогда
		
		СтрокаТекстаБлока = РазбитьСтрокуНаБлоки(Сред(
			СтрПолучитьСтроку(СтрокаТекстаЭлемента, 3), 2, СтрДлина(СтрПолучитьСтроку(СтрокаТекстаЭлемента, 3)) - 2));
			
		Заголовок = СтрЗаменить(СтрПолучитьСтроку(СтрокаТекстаБлока, 2), """", "");
		
	Иначе
		Заголовок = "";
	КонецЕсли;
		
	СтрокаОтображенияЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаНастроекЭлемента, 3), 3, СтрДлина(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 3)) - 4));
	Если Не СтрЧислоСтрок(СтрокаОтображенияЭлемента) >= 2 Тогда
		ВызватьИсключение "ПолучитьСтруктуруБлока: неверный формат строки отображения элемента";
	КонецЕсли;

	СтрокаДанныхЭлемента = РазбитьСтрокуНаБлоки(Сред(
		СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 1), 2, СтрДлина(СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 1)) - 2));
		
	ТипБлока = ТипБлокаПоКоду(Число(СтрПолучитьСтроку(СтрокаЭлементаРазбитаяНаБлоки, 1)));
		
	МассивВариантов = Новый Массив;
	Если ТипБлока = ТипыБлоков().ВыборВарианта Тогда
		Для Сч = 1 По Число(СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 3)) Цикл
			СтрокаВарианта = РазбитьСтрокуНаБлоки(Сред(
				СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 2 + Сч * 2), 2, СтрДлина(СтрПолучитьСтроку(СтрокаОтображенияЭлемента, 2 + Сч * 2)) - 2));

			СтрокаТекстаВарианта = РазбитьСтрокуНаБлоки(Сред(
				СтрПолучитьСтроку(СтрокаВарианта, 3), 2, СтрДлина(СтрПолучитьСтроку(СтрокаВарианта, 3)) - 2));
				
			МассивВариантов.Добавить(Новый Структура("Идентификатор, Заголовок",
				СтрЗаменить(СтрПолучитьСтроку(СтрокаНастроекЭлемента, 4 + Сч), """", ""),
				СтрЗаменить(СтрПолучитьСтроку(СтрокаТекстаВарианта, 2), """", "")));
		КонецЦикла;
	КонецЕсли;
		
	СтруктураБлока = ПолучитьСтруктуруБлока();
	СтруктураБлока.Тип             = ТипБлока;
	СтруктураБлока.Идентификатор   = СтрЗаменить(СтрПолучитьСтроку(СтрокаИдентификатораЭлемента, 4), """", "");
	СтруктураБлока.НомерПП         = Число(СтрПолучитьСтроку(СтрокаИдентификатораЭлемента, 2));
	СтруктураБлока.КоординатаX     = Число(СтрПолучитьСтроку(СтрокаДанныхЭлемента, 3));
	СтруктураБлока.КоординатаY     = Число(СтрПолучитьСтроку(СтрокаДанныхЭлемента, 4));
	СтруктураБлока.РазмерX         = Число(СтрПолучитьСтроку(СтрокаДанныхЭлемента, 5)) - Число(СтрПолучитьСтроку(СтрокаДанныхЭлемента, 3));
	СтруктураБлока.РазмерY         = Число(СтрПолучитьСтроку(СтрокаДанныхЭлемента, 6)) - Число(СтрПолучитьСтроку(СтрокаДанныхЭлемента, 4));
	СтруктураБлока.Заголовок       = Заголовок;
	СтруктураБлока.МассивВариантов = МассивВариантов;

	Возврат СтруктураБлока;

КонецФункции

Функция РазбитьСтрокуНаБлоки(СтрокаЭлемента)
	
	СтрокаЭлементаРазбитаяНаБлоки = "";
	КоличествоОткрытыхСкобок = 0;
	Для Сч = 1 По СтрДлина(СтрокаЭлемента) Цикл
		
		ОчереднойСимвол = Сред(СтрокаЭлемента, Сч, 1);
		Если ОчереднойСимвол = "{" Тогда
			КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок + 1;
		ИначеЕсли ОчереднойСимвол = "}" Тогда
			КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
		КонецЕсли;

		Если КоличествоОткрытыхСкобок = 0 И ОчереднойСимвол = "," Тогда
			СтрокаЭлементаРазбитаяНаБлоки = СтрокаЭлементаРазбитаяНаБлоки + Символы.ПС;
		Иначе
			СтрокаЭлементаРазбитаяНаБлоки = СтрокаЭлементаРазбитаяНаБлоки + ОчереднойСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаЭлементаРазбитаяНаБлоки;
	
КонецФункции

#КонецОбласти

#Область СозданиеФайлаСхемы

Функция ПолучитьФайлСхемы(ЭлементыСхемы)

	МассивСтрокРезультата = Новый Массив;
	МассивСтрокРезультата.Добавить(ПолучитьШаблонЗаголовкаФайла());
	Для каждого ЭлементСхемы Из ЭлементыСхемы Цикл
		Если ЭлементСхемы.Тип = ТипыБлоков().Линия Тогда
			МассивСтрокРезультата.Добавить(ПолучитьЛинию(ЭлементСхемы));
		Иначе
			МассивСтрокРезультата.Добавить(ПолучитьБлок(ЭлементСхемы));
		КонецЕсли;
	КонецЦикла;
	МассивСтрокРезультата.Добавить(ПолучитьШаблонИтогаФайла());
	
	Результат = СтрСоединить(МассивСтрокРезультата);
	Возврат СтрШаблон(Результат, ЭлементыСхемы.Количество());

КонецФункции

Функция ПолучитьШаблонЗаголовкаФайла()
	
	ВариантПалитрыЦветаФона = КодВариантаПалитры(ВариантыПалитры().ИзСтиля);
	ЦветФона                = -10; // TODO: Как цвет определять?
	ИспользоватьСетку       = ЗначениеВЧисло(Истина);
	ГоризонтальныйШагСетки  = 20;
	ВертикальныйШагСетки    = 20;
	РежимОтрисовкиСетки     = КодРежимаОтрисовкиСетки(РежимыОтрисовкиСетки().РисоватьЛинии);

	Шаблон = "{5,{{1,{3,%1,{%2}},%3,%4,%5,%6,6,6,{""N"",10},7,{""N"",10},8,{""N"",10},9,{""N"",10},13,{""N"",0},16,{""N"",0}}},";
	
	Возврат СтрШаблон(Шаблон,
		ВариантПалитрыЦветаФона,
		ЦветФона,
		ИспользоватьСетку,
		ГоризонтальныйШагСетки,
		ВертикальныйШагСетки,
		РежимОтрисовкиСетки
	) + "%1,";
	
КонецФункции

Функция ПолучитьЛинию(ЭлементСхемы)
	
	Шаблон = "1,{%1,
	// 3?, ОткудаИдет, НачалоВарианта, КудаИдет, СвободнаяЛиния
	|3,%2,%3,%4,0,
	|{{%5,
	|6,%6,%7,%8,
	// РазмещатьНаименованиеВСерединеЛинии, ОткудаВыходитЛиния, КудаВходитЛиния, 0?, ТипСтрелкиНачала, ТипСтрелкиКонца
	|0,%9,%10,0,0,1}}},";
	
	МассивКоординат = ЭлементСхемы.КоординатыТочек.ВыгрузитьЗначения();
	МассивКоординатБезопасный = Новый Массив;
	Для каждого Координата Из МассивКоординат Цикл
		МассивКоординатБезопасный.Добавить(ЗначениеВЧисло(Координата));
	КонецЦикла;
	
	// TODO: Шаблон в шаблоне и шаблоном погоняет. Рефакторинг!
	Возврат СтрШаблон(Шаблон,
		СтрШаблон("{4,%1,%2,""%3"",2}",
			ЭлементСхемы.НомерПП,
			ПолучитьЗаголовокБлока(ЭлементСхемы.Заголовок),
			ЭлементСхемы.Идентификатор
		),
		ЭлементСхемы.ВладелецЛинии,
		ЭлементСхемы.ТочкаВарианта,
		?(ЭлементСхемы.ЦельЛинии = 0, -1, ЭлементСхемы.ЦельЛинии),
		ПолучитьОтображениеБлока(),
		ЭлементСхемы.КоординатыТочек.Количество() / 2,
		СтрСоединить(МассивКоординатБезопасный, ","),
		ТекстОписанияЛинии(),
		ЭлементСхемы.ТочкаВладельцаЛинии,
		ЭлементСхемы.ТочкаЦелиЛинии
	);
	
КонецФункции

Функция ПолучитьБлок(ЭлементСхемы)
	
	Если ЭлементСхемы.Тип = ТипыБлоков().Действие Тогда
		
		Шаблон = "%1,{{{4,%2,%3,""%4"",0},4,%5,0},8,{{{%6,%7,4,%8,%9},3,16,1}},"""",0,{0},{0},""%4""},";

	ИначеЕсли ЭлементСхемы.Тип = ТипыБлоков().ВыборВарианта Тогда
		
		МассивСтрокВариантов = Новый Массив;
		МассивСтрокВариантов.Добавить(ЭлементСхемы.МассивВариантов.Количество());
		Сч = 1;
		Для каждого Вариант Из ЭлементСхемы.МассивВариантов Цикл
			Если Сч = ЭлементСхемы.МассивВариантов.Количество() Тогда
				МассивСтрокВариантов.Добавить(СтрШаблон("{1,1,{""#"",""%1""}},{3,4,{0}}}}", Вариант.Заголовок));
			Иначе
				МассивСтрокВариантов.Добавить(СтрШаблон("{1,1,{""#"",""%1""}},{3,4,{0}}", Вариант.Заголовок));
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЦикла;
		МассивСтрокВариантов.Добавить(ЭлементСхемы.МассивВариантов.Количество());
		Для каждого Вариант Из ЭлементСхемы.МассивВариантов Цикл
			МассивСтрокВариантов.Добавить("""" + Вариант.Идентификатор + """");
		КонецЦикла;
		СтрокаВариантов = СтрСоединить(МассивСтрокВариантов, ",");
		
		Шаблон = "%1,{{{4,%2,%3,""%4"",0},4,%5,0},2,{{{%6,%7,4,%8,%9},2," + СтрокаВариантов + ",{0}},";
			
	Иначе
		
		Шаблон = "%1,{{{4,%2,%3,""%4"",0},4,%5,0},2,{{{%6,%7,4,%8,%9},1}},{0}},";
		
	КонецЕсли;

	Возврат СтрШаблон(Шаблон,
		КодБлока(ЭлементСхемы.Тип),
		ЭлементСхемы.НомерПП,
		ПолучитьЗаголовокБлока(ЭлементСхемы.Заголовок),
		ЭлементСхемы.Идентификатор,
		Новый УникальныйИдентификатор,
		ПолучитьОтображениеБлока(),
		ОписаниеФигуры(ЭлементСхемы),
		ТекстОписанияКартинки(),
		ТекстОписанияЛинии()
	);
	
КонецФункции

Функция ПолучитьЗаголовокБлока(Заголовок)
	
	Если Заголовок = Неопределено Или ПустаяСтрока(Заголовок) Тогда
		Возврат "{1,0}";
	КонецЕсли;
	
	Возврат СтрШаблон("{1,1,{""#"",""%1""}}", Заголовок);
	
КонецФункции

Функция ПолучитьОтображениеБлока()
	
	Возврат "{
	// Версия? 8.3.10 тоже 7. Может "4" это для 8.2?
	//  4,
	|	7,
	// Цвет фона
	|	{3,4,{0}},
	// Цвет рамки
	|	{3,3,{-22}},
	// Цвет текста
	|	{3,3,{-3}},
	// Шрифт?
	//  {6,3,0,1},
	//  {7,2,514,{-20},100,1,100},
	|	{7,3,0,1,100},
	// Подсказка
	//  {1,1,{""#"",""Текст подсказки""}}
	|	{1,0},
	// ГоризонтальноеПоложение, ВертикальноеПоложение, ПоложениеКартинки, 0?, Гиперссылка, ПрозрачныйФон, 0?, 0?
	|	1,1,1,0,0,0,0,0
	|}"
	
КонецФункции

Функция ПолучитьШаблонИтогаФайла()
	
	Возврат "%1}";
	
КонецФункции

Функция ОписаниеФигуры(ЭлементСхемы)
	
	ТипыБлоков = ТипыБлоков();
	
	Если ЭлементСхемы.Тип = ТипыБлоков.Линия Тогда
		Возврат "";
	ИначеЕсли ЭлементСхемы.Тип = ТипыБлоков.Старт Тогда
		Возврат КоординатыБлокаСтарт(ЭлементСхемы);
	ИначеЕсли ЭлементСхемы.Тип = ТипыБлоков.Завершение Тогда
		Возврат КоординатыБлокаЗавершение(ЭлементСхемы);
	ИначеЕсли ЭлементСхемы.Тип = ТипыБлоков.Действие Или ЭлементСхемы.Тип = ТипыБлоков.ВыборВарианта Тогда
		Возврат КоординатыБлокаДействие(ЭлементСхемы);
	ИначеЕсли ЭлементСхемы.Тип = ТипыБлоков.Условие Тогда
		Возврат КоординатыБлокаУсловие(ЭлементСхемы);
	КонецЕсли;

	ВызватьИсключение СтрШаблон("ОписаниеФигуры: описание для типа блока %1 не было создано", ЭлементСхемы.Тип);
	
КонецФункции

Функция КоординатыБлокаСтарт(ЭлементСхемы)
	
	Координаты = Новый Массив;
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + Окр(ЭлементСхемы.РазмерY / 100 * 62)));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + Окр(ЭлементСхемы.РазмерX / 2)));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + Окр(ЭлементСхемы.РазмерY / 100 * 62)));
	
	Возврат СтрШаблон("5,%1,%2,%3,%4,5," + СтрСоединить(Координаты, ","),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
КонецФункции

Функция КоординатыБлокаЗавершение(ЭлементСхемы)

	Координаты = Новый Массив;
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + Окр(ЭлементСхемы.РазмерX / 2)));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));

	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + Окр(ЭлементСхемы.РазмерY / 100 * 38)));

	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));

	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));

	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + Окр(ЭлементСхемы.РазмерY / 100 * 38)));

	Возврат СтрШаблон("5,%1,%2,%3,%4,5," + СтрСоединить(Координаты, ","),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));

КонецФункции

Функция КоординатыБлокаДействие(ЭлементСхемы)

	Координаты = Новый Массив;
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
	Возврат СтрШаблон("5,%1,%2,%3,%4,4," + СтрСоединить(Координаты, ","),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
КонецФункции

Функция КоординатыБлокаУсловие(ЭлементСхемы)

	Координаты = Новый Массив;

	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + Окр(ЭлементСхемы.РазмерY / 2)));

	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + Окр(ЭлементСхемы.РазмерX / 100 * 18)));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + Окр(ЭлементСхемы.РазмерX / 100 * 82)));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + Окр(ЭлементСхемы.РазмерY / 2)));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + Окр(ЭлементСхемы.РазмерX / 100 * 82)));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаX + Окр(ЭлементСхемы.РазмерX / 100 * 18)));
	Координаты.Добавить(ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));
	
	Возврат СтрШаблон("5,%1,%2,%3,%4,6," + СтрСоединить(Координаты, ","),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаX + ЭлементСхемы.РазмерX),
		ЗначениеВЧисло(ЭлементСхемы.КоординатаY + ЭлементСхемы.РазмерY));

КонецФункции

Функция ТекстОписанияКартинки()
	
	Возврат "
	//  из библиотеки
	//  {4,1,{0,b7c81c62-d6ad-4eae-9cea-0e203182db67},"""",-1,-1,1,0,""""}
	//  из файла
	//  {4,3,{0},"""",-1,-1,0,{{#base64:...}},0,""""}
	//  Нет картинки
	|	{4,0,{0},"""",-1,-1,1,0,""""}
	|";
	
КонецФункции

Функция ТекстОписанияЛинии()
	
	Возврат "{4,0,{0},1,1,0,e45c0cd8-a878-4bcb-8e1a-af934481e1cc,0}";
	
КонецФункции

#КонецОбласти

Функция ВариантыПалитры()

	ВариантыПалитры = Новый Структура;
	ВариантыПалитры.Вставить("Windows", "Windows");
	ВариантыПалитры.Вставить("Web", "Web");
	ВариантыПалитры.Вставить("ИзСтиля", "ИзСтиля");

	Возврат Новый ФиксированнаяСтруктура(ВариантыПалитры);

КонецФункции

Функция РежимыОтрисовкиСетки()
	
	РежимыОтрисовкиСетки = Новый Структура;
	РежимыОтрисовкиСетки.Вставить("НеРисоватьСетку", "НеРисоватьСетку");
	РежимыОтрисовкиСетки.Вставить("РисоватьТочки", "РисоватьТочки");
	РежимыОтрисовкиСетки.Вставить("РисоватьШахматнуюСетку", "РисоватьШахматнуюСетку");
	РежимыОтрисовкиСетки.Вставить("РисоватьЛинии", "РисоватьЛинии");
	
	Возврат Новый ФиксированнаяСтруктура(РежимыОтрисовкиСетки);
	
КонецФункции

Функция КодБлока(Тип)
	
	ТипыБлоков = ТипыБлоков();
	
	Если Тип = ТипыБлоков.Линия Тогда
		Возврат 1;
	ИначеЕсли Тип = ТипыБлоков.Старт Тогда
		Возврат 2;
	ИначеЕсли Тип = ТипыБлоков.Завершение Тогда
		Возврат 3;
	ИначеЕсли Тип = ТипыБлоков.Условие Тогда
		Возврат 4;
	ИначеЕсли Тип = ТипыБлоков.Действие Тогда
		Возврат 5;
	ИначеЕсли Тип = ТипыБлоков.ВыборВарианта Тогда
		Возврат 6;
	ИначеЕсли Тип = ТипыБлоков.Разделение Тогда
		Возврат 7;
	ИначеЕсли Тип = ТипыБлоков.Слияние Тогда
		Возврат 8;
	ИначеЕсли Тип = ТипыБлоков.Обработка Тогда
		Возврат 9;
	ИначеЕсли Тип = ТипыБлоков.ВложенныйПроцесс Тогда
		Возврат 10;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("КодБлока: неизвестный тип блока %1", Тип);
	
КонецФункции

Функция КодВариантаПалитры(Вариант)
	
	ВариантыПалитры = ВариантыПалитры();

	Если Вариант = ВариантыПалитры.Windows Тогда
		Возврат 1;
	ИначеЕсли Вариант = ВариантыПалитры.Web Тогда
		Возврат 2;
	ИначеЕсли Вариант = ВариантыПалитры.ИзСтиля Тогда
		Возврат 3;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("КодВариантаПалитры: неизвестный вариант палитры %1", Вариант);
	
КонецФункции

Функция КодРежимаОтрисовкиСетки(Режим)
	
	РежимыОтрисовкиСетки = РежимыОтрисовкиСетки();
	
	Если Режим = РежимыОтрисовкиСетки.НеРисоватьСетку Тогда
		Возврат 0;
	ИначеЕсли Режим = РежимыОтрисовкиСетки.РисоватьТочки Тогда
		Возврат 1;
	ИначеЕсли Режим = РежимыОтрисовкиСетки.РисоватьШахматнуюСетку Тогда
		Возврат 2;
	ИначеЕсли Режим = РежимыОтрисовкиСетки.РисоватьЛинии Тогда
		Возврат 3;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("КодРежимаОтрисовкиСетки: неизвестный режим отрисовки сетки %1", Режим);
	
КонецФункции

Функция ТипБлокаПоКоду(Код)
	
	ТипыБлоков = ТипыБлоков();
	
	Если Код = 1 Тогда
		Возврат ТипыБлоков.Линия;
	ИначеЕсли Код = 2 Тогда
		Возврат ТипыБлоков.Старт;
	ИначеЕсли Код = 3 Тогда
		Возврат ТипыБлоков.Завершение;
	ИначеЕсли Код = 4 Тогда
		Возврат ТипыБлоков.Условие;
	ИначеЕсли Код = 5 Тогда
		Возврат ТипыБлоков.Действие;
	ИначеЕсли Код = 6 Тогда
		Возврат ТипыБлоков.ВыборВарианта;
	ИначеЕсли Код = 7 Тогда
		Возврат ТипыБлоков.Разделение;
	ИначеЕсли Код = 8 Тогда
		Возврат ТипыБлоков.Слияние;
	ИначеЕсли Код = 9 Тогда
		Возврат ТипыБлоков.Обработка;
	ИначеЕсли Код = 10 Тогда
		Возврат ТипыБлоков.ВложенныйПроцесс;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("ТипБлокаПоКоду: неизвестный код блока %1", Код);
	
КонецФункции

Функция ЗначениеВЧисло(Значение)
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		Возврат ?(Значение, "1", "0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧН=0; ЧГ=0");
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон("ЗначениеВЧисло: неизвестный тип для преобразования в число %1", ТипЗнч(Значение));
	
КонецФункции

#КонецОбласти
